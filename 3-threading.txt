# ----------------------------------------------------------------------------------------
# 5. Threads
# ----------------------------------------------------------------------------------------

# Q: What is the difference between a multi threaded and multi process application?
# ----------------------------------------------------------------------------------------

# A:
#
# Multi threading: One program starts more threads, which are running paralel.
# Multi processing: More program running in same time. Two different types are available
#    as multi processing solution:
#    fork : Available on unix systems only. The 'fork()' call is create a copy of actual
#           running process into memory with a different process id (PID).
#    run another binary: This solution is available on Windows as 'CreateProcess()' function,
#           and on linux like 'system()' call. In this case, no copied memory, so the new
#           process will initialize its resources again.
#
# The multi processing solution solves those problem, if any critical problem happening on the child
# processes, it will not kill the program. The main process could restart it again.
# It has not same memory parts like in case of threads, so we should to solve the data
# flows ourself via sockets or shared memories & shared queues (IPC - Inter Process Communication).
# ----------------------------------------------------------------------------------------

# ----------------------------------------------------------------------------------------
# 6. Deadlock
# ----------------------------------------------------------------------------------------

# Q: What is the deadlock? How can it happen? How can it be avoided?
# ----------------------------------------------------------------------------------------

# A1: Deadlock is when one or more processes (threads) are blocking themself. (I could
#     say itself too, in case of a neverending cycle problem) One thread is blocking so
#     resource what is necessary to continue of another thread what blocking so resource,
#     what necessary to previous one.
#
# T1 -> Get -> R1 -> Block
#   \                     \
#   Block <- R2 <- Get <- T2
# ----------------------------------------------------------------------------------------

# A2: Bad resource handling. The mutexing of resources are not right.
# ----------------------------------------------------------------------------------------

# A3: Avoid options:
# - Minimal mutexing.
# - Save short codes with mutexes if it is possible.
# - Timeouts. If any get of resources is working long time, then generate error instead of
#   wait for more time.
# - Start processing, when all resources are available.
# ----------------------------------------------------------------------------------------
